name: CI
 
on:
    workflow_dispatch:
    push:
      branches: ["main"]
 
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
 
jobs:
  build_Avatar_Package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - run: |
        cd ./VRCTallyUnityAvatar
        echo "Assets/VRCTally.meta" > ./metaList
        find Assets/VRCTally/ -name \*.meta >> ./metaList

    - uses: pCYSl5EDgo/create-unitypackage@master
      with:
        package-path: 'output.unitypackage'
        include-files: metaList
        working-folder: ./VRCTallyUnityAvatar

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: VRCTally Avatar Package
        path: './VRCTallyUnityAvatar/output.unitypackage'

  build_CSharp:
    name: ${{ matrix.platform.name }} ${{ matrix.dotnet.name }}
    runs-on: ubuntu-22.04
     
    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Linux, rid: linux-x64 }
        - { name: Windows, rid: win-x64 }
        dotnet:
        - { name: .NET 8, version: '8.0.x' }
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup .NET ${{ matrix.dotnet.version }} SDK
        id: setup-dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet.version }}
      - name: Enforce SDK Version
        run: dotnet new globaljson --sdk-version ${{ steps.setup-dotnet.outputs.dotnet-version }} --force
      - name: Verify SDK Installation
        run: dotnet --info
      - name: Restore
        run: dotnet restore
#      - name: Build
#        run: dotnet build --configuration Release --no-restore
#      - name: Test
#        run: dotnet test --no-restore --verbosity normal
      - name: Publish
        run: dotnet publish -r ${{ matrix.platform.rid }} --self-contained --artifacts-path ./artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: VRCTally ${{ matrix.platform.name }} ${{ matrix.dotnet.name }}
          path: './artifacts/publish/VRCTallyApp/release_${{ matrix.platform.rid }}'

      # Get nsis
      - name: Install NSIS
        if: matrix.platform.name == 'Windows'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install nsis

      # run NSIS installer script for windows builds
      - name: NSIS Installer
        if: matrix.platform.name == 'Windows'
        uses: joncloud/makensis-action@v4.1
        with:
          script-file: .github/scripts/installer.nsi
      
      # Upload installer
      - name: Upload Windows Installer
        if: matrix.platform.name == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: Windows Installer
          path: .github/scripts/VRCTally setup.exe
